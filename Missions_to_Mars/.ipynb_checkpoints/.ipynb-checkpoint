{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import Dependencies\n",
    "from bs4 import BeautifulSoup\n",
    "import pandas as pd\n",
    "import requests\n",
    "import pymongo\n",
    "\n",
    "# Import Splinter and set the chromedriver path\n",
    "from splinter import Browser\n",
    "executable_path = {\"executable_path\": \"/usr/local/bin/chromedriver\"}\n",
    "browser = Browser(\"chrome\", **executable_path, headless=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'mars_weather' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-6-16183e48bd20>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     57\u001b[0m         \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 59\u001b[0;31m \u001b[0mmars_data\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m'mars_weather'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmars_weather\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     60\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'mars_weather' is not defined"
     ]
    }
   ],
   "source": [
    "mars_data = {}\n",
    "\n",
    "# Visit the following URL\n",
    "url = 'https://mars.nasa.gov/news/'\n",
    "\n",
    "browser = init_browser()\n",
    "\n",
    "browser.visit(url)\n",
    "\n",
    "html = browser.html\n",
    "soup = BeautifulSoup(html, 'html.parser')\n",
    "\n",
    "article = soup.find('ul', class_='item_list')\n",
    "\n",
    "title = article.find('div', class_= 'content_title').text\n",
    "paragraph = article.find('div', class_= 'article_teaser_body').text\n",
    "\n",
    "# Store data in a dictionary\n",
    "mars_data [\"title\"] = title\n",
    "mars_data [\"paragraph\"] = paragraph\n",
    "\n",
    "\n",
    "\n",
    "### JPL Mars Space Images - Featured Image\n",
    "\n",
    "# Visit the following URL\n",
    "url = \"https://www.jpl.nasa.gov/spaceimages/?search=&category=Mars\"\n",
    "browser.visit(url)\n",
    "\n",
    "html = browser.html\n",
    "soup = BeautifulSoup(html, 'html.parser')\n",
    "\n",
    "image_url = soup.find('div', class_='img').find('img', class_= 'thumb')['src']\n",
    "\n",
    "main_url = 'https://www.jpl.nasa.gov'\n",
    "\n",
    "feature_image_url = main_url + image_url\n",
    "\n",
    "mars_data ['feature_image_url'] = feature_image_url\n",
    "\n",
    "\n",
    "# ### Mars Weather\n",
    "\n",
    "# Visit the following URL\n",
    "url = \"https://twitter.com/marswxreport?lang=en\"\n",
    "browser.visit(url)\n",
    "\n",
    "html = browser.html\n",
    "soup = BeautifulSoup(html, 'html.parser')\n",
    "\n",
    "results = soup.find('div', class_= 'css-1dbjc4n')\n",
    "weather = results.find_all('span')\n",
    "\n",
    "for x in range(len(weather)):\n",
    "    if 'sol' in weather[x].text:\n",
    "        print (weather[x].text)\n",
    "        mars_data ['weather'] = weather[x]\n",
    "        break\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# ### Mars Facts\n",
    "\n",
    "url = 'https://space-facts.com/mars/'\n",
    "\n",
    "facts = pd.read_html(url)\n",
    "facts\n",
    "\n",
    "df_mars = facts[0]\n",
    "df_mars.columns = ['Mars','Data']\n",
    "df_mars.set_index('Mars', inplace=True)\n",
    "df_mars\n",
    "\n",
    "html_table = df_mars.to_html()\n",
    "html_table\n",
    "\n",
    "\n",
    "html_table.replace('\\n', '')\n",
    "\n",
    "\n",
    "df_mars.to_html('table.html')\n",
    "\n",
    "mars_data ['facts'] = html_table\n",
    "\n",
    "\n",
    "# ### Mars Hemispheres\n",
    "\n",
    "url = \"https://astrogeology.usgs.gov/search/results?q=hemisphere+enhanced&k1=target&v1=Mars\"\n",
    "\n",
    "browser.visit(url)\n",
    "html = browser.html\n",
    "soup = BeautifulSoup(html, 'html.parser')\n",
    "\n",
    "items = soup.find_all('div', class_='item')\n",
    "\n",
    "images = []\n",
    "\n",
    "main_url = 'https://astrogeology.usgs.gov'\n",
    "\n",
    "for item in items:\n",
    "    title = item.find('h3').text\n",
    "    partial_img = item.find('a', class_= 'itemLink product-item')['href']\n",
    "\n",
    "    browser.visit(main_url + partial_img)\n",
    "    partial_img = browser.html\n",
    "    soup = BeautifulSoup(partial_img, 'html.parser')\n",
    "\n",
    "    img_url = main_url + soup.find('img', class_='wide-image')['src']\n",
    "\n",
    "    images.append({'Title': title, 'img_url': img_url})\n",
    "\n",
    "mars_data ['images'] = images\n",
    "\n",
    "\n",
    "# Close the browser after scraping\n",
    "browser.quit()\n",
    "\n",
    "# Retrun results\n",
    "return mars_data\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def init_browser():\n",
    "    # @NOTE: Replace the path with your actual path to the chromedriver\n",
    "    executable_path = {\"executable_path\": \"/usr/local/bin/chromedriver\"}\n",
    "    return Browser(\"chrome\", **executable_path, headless=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
